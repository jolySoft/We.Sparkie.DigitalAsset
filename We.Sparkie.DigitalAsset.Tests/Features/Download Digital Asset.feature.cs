// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace We.Sparkie.DigitalAsset.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DownloadAndListDigitalAssetFeature : Xunit.IClassFixture<DownloadAndListDigitalAssetFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Download Digital Asset.feature"
#line hidden
        
        public DownloadAndListDigitalAssetFeature(DownloadAndListDigitalAssetFeature.FixtureData fixtureData, We_Sparkie_DigitalAsset_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Download and list Digital Asset", "\tIn order to manage my audio files\r\n\tAs an audiofile\r\n\tI want to download and lis" +
                    "t files", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Dowload an asset from right location")]
        [Xunit.TraitAttribute("FeatureTitle", "Download and list Digital Asset")]
        [Xunit.TraitAttribute("Description", "Dowload an asset from right location")]
        public virtual void DowloadAnAssetFromRightLocation()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dowload an asset from right location", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Location"});
                table1.AddRow(new string[] {
                            "50FC9308-7A50-4B74-9702-B999AFAEE4B0",
                            "Ochre - Project Caelus - 06 Crowd of Stars.wav",
                            "D9AE1DF8-99EE-4F5C-92D8-10F7ADF6C4AB"});
#line 7
 testRunner.Given("I have uploaded this asset", ((string)(null)), table1, "Given ");
#line hidden
#line 10
    testRunner.When("I download an asset with this id 50FC9308-7A50-4B74-9702-B999AFAEE4B0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then("it is download from this location D9AE1DF8-99EE-4F5C-92D8-10F7ADF6C4AB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
    testRunner.And("the audio data is populated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List out assets")]
        [Xunit.TraitAttribute("FeatureTitle", "Download and list Digital Asset")]
        [Xunit.TraitAttribute("Description", "List out assets")]
        public virtual void ListOutAssets()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List out assets", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Location",
                            "Size",
                            "Bit Depth",
                            "Sample Rate"});
                table2.AddRow(new string[] {
                            "50FC9308-7A50-4B74-9702-B999AFAEE4B0",
                            "Ochre - Project Caelus - 06 Crowd of Stars.wav",
                            "D9AE1DF8-99EE-4F5C-92D8-10F7ADF6C4AB",
                            "3,458,286",
                            "24",
                            "44100"});
                table2.AddRow(new string[] {
                            "F9700558-A488-40BD-B572-E301C4D5286D",
                            "Brian Adams - Some really bad.wav",
                            "4AFE0223-6007-4C0D-898D-6BB0B89328F6",
                            "7,0345,462",
                            "16",
                            "44100"});
#line 15
    testRunner.Given("I have uploaded these assets", ((string)(null)), table2, "Given ");
#line hidden
#line 19
    testRunner.When("I list my assets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Size",
                            "Bit Depth",
                            "Sample Rate"});
                table3.AddRow(new string[] {
                            "50FC9308-7A50-4B74-9702-B999AFAEE4B0",
                            "Ochre - Project Caelus - 06 Crowd of Stars.wav",
                            "3,458,286",
                            "24",
                            "44100"});
                table3.AddRow(new string[] {
                            "F9700558-A488-40BD-B572-E301C4D5286D",
                            "Brian Adams - Some really bad.wav",
                            "7,0345,462",
                            "16",
                            "44100"});
#line 20
    testRunner.Then("I get this list", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DownloadAndListDigitalAssetFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DownloadAndListDigitalAssetFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
